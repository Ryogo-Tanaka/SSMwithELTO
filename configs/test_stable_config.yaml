# configs/test_stable_config.yaml
# テスト用数値安定性強化設定 - ランダムデータでもエラーが発生しない設定

# =====================================
# データ処理設定
# =====================================
data:
  train_ratio: 0.7
  val_ratio: 0.2  
  test_ratio: 0.1
  normalization: "standard"
  handle_missing: "interpolate"
  batch_size: 32
  num_workers: 4
  pin_memory: true

# =====================================
# モデル構成
# =====================================
model:
  encoder:
    input_dim: 6
    channels: 32        # 削減: 計算量軽減
    layers: 4           # 削減: 計算量軽減  
    kernel_size: 3
    activation: "GELU"
    dropout: 0.1

  decoder:
    output_dim: 6
    window: 8
    tau: 1
    hidden: 32          # 削減: 計算量軽減
    ma_kernel: 16       # 削減: 計算量軽減
    gru_hidden: 16      # 削減: 計算量軽減
    activation: "GELU"
    dropout: 0.1

# =====================================
# 状態空間モデル（SSM）設定 - テスト用安定化
# =====================================
ssm:
  realization:
    past_horizon: 10    # 適度な値: 5→10（十分な履歴、でも安定）
    jitter: 1e-6        # 適度な値: 1e-2→1e-6（数値精度保持）
    cond_thresh: 1e10   # 適度な緩和: 1e8→1e10（条件緩和）
    rank: 4             # 適度な次元: 3→4（十分な表現力）
    reg_type: "sum"

  df_state:
    feature_dim: 24     # 適度な値: 16→24（十分な特徴次元）
    lambda_A: 1e-3      # 元に戻す: 1e-2→1e-3（過度な正則化を緩和）
    lambda_B: 1e-3      # 元に戻す: 1e-2→1e-3（過度な正則化を緩和）
    
    feature_net:
      hidden_sizes: [48, 48]  # 適度に増加: [32,32]→[48,48]（十分な表現力）
      activation: "ReLU"
      dropout: 0.1            # 元に戻す: 0.2→0.1（過度な正則化を緩和）
      
    cross_fitting:
      n_blocks: 4             # 適度な値: 3→4（計算量とのバランス）
      min_block_size: 15      # 適度な値: 20→15（ブロック数とのバランス）

  df_observation:
    obs_feature_dim: 12       # 適度な値: 8→12（十分な特徴次元）
    lambda_B: 1e-3            # 元に戻す: 1e-2→1e-3（過度な正則化を緩和）
    lambda_dB: 1e-3           # 元に戻す: 1e-2→1e-3（過度な正則化を緩和）
    
    obs_net:
      hidden_sizes: [24, 24]  # 適度に増加: [16,16]→[24,24]（十分な表現力）
      activation: "ReLU"
      dropout: 0.1            # 元に戻す: 0.2→0.1（過度な正則化を緩和）
      
    cross_fitting:
      n_blocks: 4             # 適度な値: 3→4（計算量とのバランス）
      min_block_size: 15      # 適度な値: 20→15（ブロック数とのバランス）

# =====================================
# 学習設定 - テスト用短縮
# =====================================
training:
  use_kalman_filtering: true
  
  phase1:
    epochs: 10              # 大幅削減: 50→10（テスト高速化）
    T1_iterations: 5        # 削減: 10→5（テスト高速化）
    T2_iterations: 3        # 削減: 5→3（テスト高速化）
    
    df_a:
      warmup_epochs: 3      # 削減: 10→3（テスト高速化）
      lr: 5e-3              # 増加: 学習率上げて短時間で収束
      
    df_b:
      start_epoch: 3        # 削減: 10→3（テスト高速化）
      lr: 5e-3              # 増加: 学習率上げて短時間で収束

  phase2:
    epochs: 20              # 大幅削減: 100→20（テスト高速化）
    lr_encoder: 5e-4        # 増加: 1e-4→5e-4（学習率上げて短時間で収束）
    lr_decoder: 5e-4        # 増加: 1e-4→5e-4（学習率上げて短時間で収束）
    lr_phi: 5e-4            # 増加: 1e-4→5e-4（学習率上げて短時間で収束）
    lr_psi: 5e-4            # 増加: 1e-4→5e-4（学習率上げて短時間で収束）
    lambda_cca: 0.1
    update_strategy: "all"

  device: "auto"
  seed: 42
  gradient_clip: 1.0
  
  early_stopping:
    patience: 5             # 削減: 10→5（テスト高速化）
    min_delta: 1e-5         # 緩和: 1e-6→1e-5（早期終了しやすく）
    
  checkpoint:
    save_every: 5           # 削減: 10→5（テスト高速化）
    keep_best: true

# =====================================
# Kalmanフィルタリング設定 - 安定化
# =====================================
kalman:
  noise_estimation:
    method: "mle"
    obs_noise_init: 1e-1    # 増加: 1e-2→1e-1（ノイズ初期値増）
    state_noise_init: 1e-2  # 増加: 1e-3→1e-2（ノイズ初期値増）
    min_noise: 1e-5         # 緩和: 1e-6→1e-5（最小ノイズ緩和）
    max_noise: 1e1          # 削減: 1e2→1e1（最大ノイズ削減）
    
  initialization:
    method: "data_driven"
    initial_cov_scale: 2.0  # 増加: 1.0→2.0（初期共分散増加）
    
  numerical:
    jitter: 1e-5            # 増加: 1e-6→1e-5（ジッター増加）
    regularization: 1e-3    # 増加: 1e-4→1e-3（正則化強化）
    condition_threshold: 1e8 # 緩和: 1e12→1e8（条件緩和）

# =====================================
# 評価設定 - テスト簡素化
# =====================================
evaluation:
  metrics:
    - "mse"
    - "mae"
    - "rmse"
    
  forecasting:
    horizon: 5              # 削減: 10→5（テスト高速化）
    n_samples: 50           # 削減: 100→50（テスト高速化）
    
  visualization:
    n_plot_samples: 100     # 削減: 200→100（テスト高速化）
    plot_dimensions: 3
    save_plots: false       # テスト時はプロット保存しない

# =====================================
# 実験管理設定
# =====================================
experiment:
  name: "test_stable_experiment"
  version: "v1.0"
  description: "テスト用数値安定性強化設定"
  
  output:
    save_models: true
    save_predictions: true
    save_logs: true
    save_plots: false       # テスト時はプロット保存しない
    compress_results: false
    
  reproducibility:
    set_deterministic: true
    log_git_info: true
    save_environment: true

# =====================================
# ロギング設定
# =====================================
logging:
  level: "WARNING"          # INFO→WARNING（ログ削減）
  format: "detailed"
  save_to_file: true
  console_output: true
  
  progress:
    show_progress_bar: true
    update_frequency: 5     # 削減: 10→5（更新頻度上げる）

# =====================================
# デバッグ・テスト設定
# =====================================
debug:
  test_mode: true           # テストモード有効
  quick_run: true           # 高速実行モード有効
  verbose_training: false   # 詳細ログ無効
  save_intermediate: false  # 中間結果保存無効
  memory_profiling: false   # メモリプロファイリング無効