# ====================================================================
# 【再構成モード】学習用設定テンプレート
# 用途: 画像・時系列データの再構成学習（元データの復元）
#
# 実行コマンド例:
# python scripts/run_full_experiment.py \
#     --config configs/template_reconstruction_config.yaml \
#     --data data/your_data.npz \
#     --output results/reconstruction_$(date +%Y%m%d_%H%M) \
#     --device cuda
# ====================================================================

# ========================================
# 1. 実験モード設定
# ========================================
experiment:
  mode: "reconstruction"  # 必須: "reconstruction"（再構成） or "target_prediction"（ターゲット予測）

# ========================================
# 2. データ設定
# ========================================
data:
  train_ratio: 0.7        # 学習データ比率（推奨: 0.6-0.8）
  val_ratio: 0.2          # 検証データ比率（推奨: 0.1-0.2）
  test_ratio: 0.1         # テストデータ比率（推奨: 0.1-0.2）
  normalization: "unit_scale"  # 正規化方法: "unit_scale"（[0,1]）, "standardize"（平均0,標準偏差1）
  batch_size: 300         # バッチサイズ（メモリに応じて調整）

  # 画像データの場合のみ指定
  image_shape: [48, 48, 1]  # [高さ, 幅, チャネル数]（例: 48x48グレースケール）

# ========================================
# 3. モデルアーキテクチャ設定
# ========================================
model:
  # --- エンコーダ（y_t → m_t）---
  encoder:
    type: "rkn"                    # 必須: "rkn"（画像用CNN）, "mlp"（時系列用）
    input_resolution: [48, 48, 1]  # 画像の場合: [H, W, C]、時系列の場合は不要
    feature_dim: 50                # 潜在次元数（推奨: 32-128）
    hidden: 200                    # FC層隠れ次元数（推奨: 64-256）
    conv_channels: [32, 64]        # CNN層チャネル数（rkn typeの場合）
    activation: "relu"             # 活性化関数: "relu", "gelu", "tanh"
    normalize_input: false         # 入力正規化（通常false）
    normalize_output: false        # 出力正規化（通常false）
    track_running_stats: true      # BatchNorm統計追跡

  # --- デコーダ（m_t → ŷ_t）---
  decoder:
    type: "rkn"                    # 必須: "rkn"（画像用逆CNN）, "mlp"（時系列用）
    input_resolution: [48, 48, 1]  # 出力画像解像度（rkn typeの場合）
    feature_dim: 50                # 入力潜在次元数（encoderと一致）
    hidden: 200                    # FC層隠れ次元数
    grid: [12, 12, 64]             # 中間グリッドサイズ（rkn type）
    upsample_mode: "nearest"       # アップサンプリング: "nearest", "bilinear"
    conv_channels: [64, 32, 1]     # 逆畳み込み層チャネル数（最後は出力チャネル数）
    activation: "relu"             # 活性化関数
    output_activation: "sigmoid"   # 出力活性化: "sigmoid"（[0,1]）, "tanh"（[-1,1]）, "linear"

# ========================================
# 4. 学習設定
# ========================================
training:
  # --- 統合学習設定（Phase-1 + Phase-2を各エポックで実行）---
  epochs: 10                # 総エポック数（推奨: 10-50）
  T1_iterations: 5          # DF-A/DF-B Stage-1反復数（推奨: 3-10）
  T2_iterations: 5          # DF-A/DF-B Stage-2反復数（推奨: 1-5）
  phase1_warmup_epochs: 5   # Phase-2開始前のPhase-1ウォームアップ（推奨: epochs//2）

  # --- 実験モード設定 ---
  experiment_mode: "reconstruction"    # 必須: training.experiment_modeでも指定
  reconstruction_loss_weight: 1.0      # 再構成損失重み（固定: 1.0）

  # --- Phase-1学習率（DF層学習用）---
  lr_phi: 1e-3              # φ_θ（状態特徴）学習率（推奨: 1e-4～1e-2）
  lr_psi: 1e-3              # ψ_ω（観測特徴）学習率（推奨: 1e-4～1e-2）
  weight_decay: 1e-4        # 正則化パラメータ（推奨: 1e-5～1e-3）

  # --- Phase-2学習率（End-to-end学習用）---
  lr_encoder: 1e-3          # エンコーダ学習率（推奨: 1e-4～1e-2）
  lr_decoder: 1e-3          # デコーダ学習率（推奨: 1e-4～1e-2）
  lambda_cca: 0.0001        # CCA損失重み（推奨: 1e-5～1e-3、画像は小さめ）
  update_strategy: "encoder_decoder_only"  # 固定: encoder/decoderのみ更新

# ========================================
# 5. SSM (状態空間モデル) 設定
# ========================================
ssm:
  # --- 確率的実現 ---
  realization:
    past_horizon: 20        # 過去窓長（推奨: 10-30、データ長に応じて）
    rank: 30                # 状態次元数（推奨: 20-50）
    encoder_output_dim: 50  # エンコーダ出力次元（model.encoder.feature_dimと一致）
    ridge_param: 1e-3       # Ridge正則化（推奨: 1e-4～1e-2）
    jitter: 1e-6            # 数値安定化パラメータ（固定）
    m: 50                   # ラグ共分散推定サンプル数（推奨: 30-100）

    # --- 特徴写像設定 ---
    feature_mapping:
      type: "mlp"           # "averaging"（時間平均）, "linear"（線形）, "mlp"（MLP）
      hidden_dims: [32]     # MLPの隠れ層（[]で線形のみ、[32,16]で2層MLP）
      activation: "relu"    # "relu", "tanh", "gelu"

  # --- DF-A (状態層) 設定 ---
  df_state:
    feature_dim: 50         # d_A: 状態特徴次元（推奨: encoder.feature_dimと同じ）
    lambda_A: 1e-3          # V_A正則化パラメータ（推奨: 1e-4～1e-2）
    lambda_B: 1e-3          # U_A正則化パラメータ（推奨: 1e-4～1e-2）
    feature_net:            # StateFeatureNet（φ_θ）設定
      hidden_sizes: [128, 64]  # MLP隠れ層（推奨: [64], [128,64]）
      activation: "ReLU"       # "ReLU", "GELU", "Tanh"
      dropout: 0.1             # ドロップアウト率（推奨: 0.0-0.3）
    cross_fitting:
      n_blocks: 5           # クロスフィッティングブロック数（推奨: 3-10）
      min_block_size: 100   # 最小ブロックサイズ（推奨: 50-200）

  # --- DF-B (観測層) 設定 ---
  df_observation:
    obs_feature_dim: 25         # d_B: 観測特徴次元（推奨: feature_dim//2）
    multivariate_feature_dim: 50  # m: エンコーダ出力次元（encoder.feature_dimと一致）
    lambda_B: 1e-3              # V_B正則化パラメータ（推奨: 1e-4～1e-2）
    lambda_dB: 1e-3             # u_B正則化パラメータ（推奨: 1e-4～1e-2）
    obs_net:                    # ObservationFeatureNet（ψ_ω）設定
      hidden_sizes: [64, 32]      # MLP隠れ層（推奨: [32], [64,32]）
      activation: "ReLU"          # "ReLU", "GELU", "Tanh"
      dropout: 0.1                # ドロップアウト率（推奨: 0.0-0.3）
    cross_fitting:
      n_blocks: 5               # クロスフィッティングブロック数
      min_block_size: 100       # 最小ブロックサイズ

# ========================================
# 6. 計算設定
# ========================================
computation:
  device: "auto"            # "auto"（自動選択）, "cuda", "cpu"
  num_workers: 4            # データローダー並列数（推奨: CPU数の半分）
  pin_memory: true          # GPU転送高速化（CUDA使用時true）

# ========================================
# 7. 出力設定
# ========================================
output:
  save_model: true          # モデル保存
  save_history: true        # 学習履歴保存
  create_plots: true        # 可視化作成
  save_reconstructions: true # 再構成結果保存

# ========================================
# 8. ログ設定
# ========================================
logging:
  level: "INFO"             # ログレベル: "DEBUG", "INFO", "WARNING"
  console_output: true      # コンソール出力
  file_output: true         # ファイル出力

# ========================================
# 9. 評価設定
# ========================================
evaluation:
  use_new_realization: true # 新しい確率実現使用（固定: true）

  # --- 再構成評価指標 ---
  reconstruction_metrics:
    metrics: ['reconstruction_rmse', 'psnr', 'temporal_correlation']  # 評価指標
    max_samples: 100        # 評価対象サンプル数
    visualization: true     # 可視化生成

  # --- エンコード特徴空間可視化 ---
  encoded_feature_space_viz:
    dim_indices: [0, 1]     # 表示する次元（デフォルト: 最初の2次元）
    max_samples: 100        # 最大表示サンプル数
