# ====================================================================
# フィルタリング評価用設定ファイル雛形 (run_filtering_evaluation.py用)
# 用途: 学習済みモデルのフィルタリング性能評価
# 使用方法: 評価対象データとモデルに合わせてパラメータを調整
# ====================================================================

# 標準評価設定 (mode='standard'時に使用)
evaluation:
  experiment_name: "real_data_filtering_evaluation"
  save_detailed_results: true    # 詳細結果保存
  create_visualizations: true    # 可視化作成

  data:
    test_split: "test"           # 使用データ分割 (test/val/train)
    calibration_ratio: 0.2       # キャリブレーション用データ比率
    max_evaluation_length: null  # 評価長制限 (null=制限なし)

  # 評価メトリクス設定
  metrics:
    accuracy:                    # 精度メトリクス
      - "mse"                    # 平均二乗誤差
      - "mae"                    # 平均絶対誤差
      - "rmse"                   # 平方根平均二乗誤差
    uncertainty:                 # 不確実性メトリクス
      - "coverage_95"            # 95%信頼区間カバレッジ
    efficiency:                  # 効率性メトリクス
      - "processing_time"        # 処理時間

    # スペクトル分析指標（モード分解）
    spectrum_analysis:
      enabled: true                    # モード分解分析有効化
      sampling_interval: 0.1           # サンプリング間隔 Δt (重要パラメータ)
      dominant_threshold: 0.1          # 主要モード閾値 (スペクトル半径に対する比率)
      compare_with_truth: false        # 真値との比較（真値利用可能時にtrue）
      save_detailed_data: true         # 詳細データ保存（JSON+NPZ形式）

# フィルタリング設定
filtering:
  batch:
    return_likelihood: true      # 尤度返却
    chunk_size: null             # チャンクサイズ (null=自動)

# 不確実性分析設定
uncertainty_analysis:
  enabled: true                  # 不確実性分析有効化
  confidence_intervals:
    levels: [0.95]              # 信頼区間レベル

# 可視化設定
visualization:
  enabled: true                  # 可視化有効化
  format: "png"                  # 出力形式 (png/pdf/svg)
  plots:
    - "confidence_intervals"     # 信頼区間プロット
    - "method_comparison"        # 手法比較プロット

# 出力設定
output:
  formats:
    detailed: "json"             # 詳細結果形式
    summary: "csv"               # サマリ形式

# 計算設定
computation:
  device: "auto"                 # デバイス選択
  dtype: "float32"               # データ型

# ログ設定
logging:
  level: "INFO"                  # ログレベル
  console_output: true           # コンソール出力

# 推論設定
inference:
  noise_estimation_method: "residual_based"  # ノイズ推定手法
  gamma_Q: 1.0e-6                           # 状態ノイズ正則化
  gamma_R: 1.0e-6                           # 観測ノイズ正則化
  use_calibration: true                     # キャリブレーション使用
  initialization_method: "data_driven"      # 初期化手法
  n_init_samples: 20                        # 初期化サンプル数

# SSM設定 (realization用)
ssm:
  realization:
    past_horizon: 10            # 過去窓長 (調整推奨: 学習時設定と合わせる)
    rank: 4                    # 状態次元数 (学習時設定と合わせる)
    encoder_output_dim: 8      # エンコーダー出力次元 (学習時設定と合わせる)
    ridge_param: 1e-3          # Ridge正則化パラメータ
    jitter: 1e-6               # 数値安定化パラメータ
    m: 500                     # ラグ共分散推定サンプル数

  # DF-A (状態層) 設定 - 評価時は学習時設定と合わせる
  df_state:
    feature_dim: 16            # d_A: 状態特徴次元 (学習時設定と合わせる)
    lambda_A: 1e-4             # V_A正則化パラメータ
    lambda_B: 1e-4             # U_A正則化パラメータ
    feature_net:               # StateFeatureNet設定 (学習時と同じ)
      hidden_sizes: [64, 32]
      activation: "ReLU"
      dropout: 0.0
    cross_fitting:
      n_blocks: 2
      min_block_size: 100

  # DF-B (観測層) 設定 - 評価時は学習時設定と合わせる
  df_observation:
    obs_feature_dim: 8             # d_B: 観測特徴次元 (学習時設定と合わせる)
    multivariate_feature_dim: 8   # m: エンコーダー出力次元 (学習時設定と合わせる)
    lambda_B: 1e-4                # V_B正則化パラメータ
    lambda_dB: 1e-4               # u_B正則化パラメータ
    obs_net:                      # ObservationFeatureNet設定 (学習時と同じ)
      hidden_sizes: [32, 16]
      activation: "ReLU"
      dropout: 0.0
    cross_fitting:
      n_blocks: 2
      min_block_size: 100

---
# ====================================================================
# クイック評価設定 (mode='quick'時に使用)
# 用途: 高速な動作確認・デバッグ用
# ====================================================================
quick_test_evaluation:
  evaluation:
    experiment_name: "quick_real_data_test"
    save_detailed_results: false    # 高速化のため無効
    create_visualizations: false    # 高速化のため無効
    data:
      test_split: "test"
      calibration_ratio: 0.2
      max_evaluation_length: 200    # 高速化のため制限

    metrics:
      accuracy: ["mse"]              # 最小限のメトリクス
      uncertainty: ["coverage_95"]
      efficiency: ["processing_time"]

      # スペクトル分析（クイック版）
      spectrum_analysis:
        enabled: true                # 高速分析有効
        sampling_interval: 0.1       # 標準設定
        dominant_threshold: 0.2      # より緩い閾値（高速化）
        compare_with_truth: false    # 高速化のため無効
        save_detailed_data: false    # 高速化のため無効

  filtering:
    batch:
      return_likelihood: false       # 高速化のため無効

  uncertainty_analysis:
    enabled: false                   # 高速化のため無効

  visualization:
    enabled: false                   # 高速化のため無効

  computation:
    device: "auto"

  logging:
    level: "INFO"

  # 推論設定 (標準と同じ)
  inference:
    noise_estimation_method: "residual_based"
    gamma_Q: 1.0e-6
    gamma_R: 1.0e-6
    use_calibration: true
    initialization_method: "data_driven"
    n_init_samples: 20

  # SSM設定 (高速化調整)
  ssm:
    realization:
      past_horizon: 5              # 短縮版
      rank: 2                      # 短縮版
      encoder_output_dim: 8        # エンコーダー出力次元
      ridge_param: 1e-3            # Ridge正則化パラメータ
      jitter: 1e-6                # 数値安定化パラメータ
      m: 200                       # 短縮版

    # DF-A (状態層) 設定 - クイック版
    df_state:
      feature_dim: 8               # 短縮版
      lambda_A: 1e-4
      lambda_B: 1e-4
      feature_net:
        hidden_sizes: [32, 16]     # 短縮版
        activation: "ReLU"
        dropout: 0.0
      cross_fitting:
        n_blocks: 2
        min_block_size: 50         # 短縮版

    # DF-B (観測層) 設定 - クイック版
    df_observation:
      obs_feature_dim: 4           # 短縮版
      multivariate_feature_dim: 8  # エンコーダー出力次元と合わせる
      lambda_B: 1e-4
      lambda_dB: 1e-4
      obs_net:
        hidden_sizes: [16, 8]      # 短縮版
        activation: "ReLU"
        dropout: 0.0
      cross_fitting:
        n_blocks: 2
        min_block_size: 50         # 短縮版

---
# ====================================================================
# 包括評価設定 (mode='comprehensive'時に使用)
# 用途: 詳細な性能評価・研究用
# ====================================================================
comprehensive_evaluation:
  evaluation:
    experiment_name: "comprehensive_real_data_evaluation"
    save_detailed_results: true
    create_visualizations: true
    data:
      test_split: "test"
      calibration_ratio: 0.25       # より多くのキャリブレーション
      max_evaluation_length: null   # 制限なし

    metrics:
      accuracy: ["mse", "mae", "rmse", "mape"]  # 拡張メトリクス
      uncertainty: ["coverage_95", "coverage_99", "interval_width"]
      efficiency: ["processing_time", "memory_usage"]

      # スペクトル分析（包括版）
      spectrum_analysis:
        enabled: true                    # 詳細分析有効
        sampling_interval: 0.1           # 標準設定
        dominant_threshold: 0.05         # より厳密な閾値
        compare_with_truth: true         # 真値比較有効（利用可能時）
        save_detailed_data: true         # 詳細データ保存
        numerical_precision: "high"      # 高精度計算

  filtering:
    batch:
      return_likelihood: true
      chunk_size: 100

  uncertainty_analysis:
    enabled: true
    confidence_intervals:
      levels: [0.9, 0.95, 0.99]     # 複数レベル

  visualization:
    enabled: true
    format: "png"
    plots:
      - "confidence_intervals"
      - "method_comparison"
      - "residual_analysis"
      - "spectral_analysis"
      - "performance_metrics"

  computation:
    device: "auto"
    dtype: "float64"                # 高精度

  logging:
    level: "DEBUG"                  # 詳細ログ

  inference:
    noise_estimation_method: "residual_based"
    gamma_Q: 1.0e-6
    gamma_R: 1.0e-6
    use_calibration: true
    initialization_method: "data_driven"
    n_init_samples: 50              # より多くのサンプル

  ssm:
    realization:
      past_horizon: 15              # より長い窓
      rank: 6                      # より高次元
      encoder_output_dim: 8        # エンコーダー出力次元
      ridge_param: 1e-3            # Ridge正則化パラメータ
      jitter: 1e-8                 # 高精度
      m: 1000                      # より多くのサンプル

    # DF-A (状態層) 設定 - 包括版
    df_state:
      feature_dim: 24              # より高次元
      lambda_A: 1e-4
      lambda_B: 1e-4
      feature_net:
        hidden_sizes: [128, 64, 32]  # より深いネットワーク
        activation: "ReLU"
        dropout: 0.1               # 正則化強化
      cross_fitting:
        n_blocks: 3                # より細かい分割
        min_block_size: 200        # より大きなブロック

    # DF-B (観測層) 設定 - 包括版
    df_observation:
      obs_feature_dim: 12            # より高次元
      multivariate_feature_dim: 8   # エンコーダー出力次元と合わせる
      lambda_B: 1e-4
      lambda_dB: 1e-4
      obs_net:
        hidden_sizes: [64, 32, 16]   # より深いネットワーク
        activation: "ReLU"
        dropout: 0.1               # 正則化強化
      cross_fitting:
        n_blocks: 3                # より細かい分割
        min_block_size: 200        # より大きなブロック